package com.dropbox.kaiken.processor.com.dropbox.kaiken.processor

import com.google.common.truth.Truth.assertThat
import com.squareup.anvil.annotations.ExperimentalAnvilApi
import com.squareup.anvil.compiler.internal.testing.compileAnvil
import com.squareup.anvil.compiler.internal.testing.createInstance
import org.junit.Test

class InjectableCodeGeneratorTest {
    @ExperimentalAnvilApi
    @Test
    fun `GIVEN annotated clazz WHEN generating code THEN code is generated`() {
        compileAnvil(
            """
        package com.squareup.test
        
        import androidx.appcompat.app.AppCompatActivity
        import com.dropbox.kaiken.scoping.AuthAwareFragment
        import com.dropbox.kaiken.processor.internal.fakes.FakeActivity
        import com.dropbox.kaiken.runtime.InjectorFactory
        import com.dropbox.kaiken.runtime.InjectorHolder
        
        @com.dropbox.kaiken.annotation.Furiex
        @com.dropbox.kaiken.annotation.Injectable
        class AnyFuriex: FakeActivity, InjectorHolder<AnyFuriexInjector>, AppCompatActivity() {
        
              override fun getInjectorFactory() = fakeInjectorFactory()
              
              private fun fakeInjectorFactory() = object : InjectorFactory<AnyFuriexInjector> {
                    override fun createInjector(): AnyFuriexInjector {
                        return object: AnyFuriexInjector { }    
                    }
              }
        }
        """,
            """
        // Generated by Kaiken
        package com.dropbox.kaiken.integration_tests;

        import com.dropbox.kaiken.Injector;

        public interface AnyFuriexInjector extends Injector
        """
        ) {
            assertThat(
                classLoader.loadClass("com.dropbox.kaiken.annotation.Furiex").createInstance()
            ).isNotNull()
        }
    }
}
